{
	"info": {
		"_postman_id": "login-api-collection",
		"name": "PetCare Login API Tests",
		"description": "Complete login API testing collection for PetCare authentication system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Successful Login Tests",
			"item": [
				{
					"name": "Login Pet Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include(\"Login successful\");",
									"});",
									"",
									"pm.test(\"Response contains token and user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.be.null;",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('fullName');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.expect(jsonData.data).to.have.property('isEmailVerified');",
									"});",
									"",
									"pm.test(\"Token is valid JWT format\", function () {",
									"    const jsonData = pm.response.json();",
									"    const token = jsonData.data.token;",
									"    pm.expect(token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/);",
									"});",
									"",
									"pm.test(\"User role is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.be.oneOf(['PET_OWNER', 'VETERINARIAN', 'SHELTER', 'ADMIN']);",
									"});",
									"",
									"// Save token for authenticated requests",
									"if (pm.response.json().success && pm.response.json().data) {",
									"    pm.environment.set(\"auth_token\", pm.response.json().data.token);",
									"    pm.environment.set(\"user_id\", pm.response.json().data.userId);",
									"    pm.environment.set(\"user_email\", pm.response.json().data.email);",
									"    pm.environment.set(\"user_role\", pm.response.json().data.role);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"petowner@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"petowner@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": ["{{base_url}}"],
									"path": ["api", "auth", "login"]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Login successful!\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwZXRvd25lckBleGFtcGxlLmNvbSIsInVzZXJJZCI6MSwidXNlclJvbGUiOiJQRVRfT1dORVIiLCJpYXQiOjE2ODk2NzIwMDAsImV4cCI6MTY4OTc1ODQwMH0.xyz...\",\n    \"userId\": 1,\n    \"email\": \"petowner@example.com\",\n    \"fullName\": \"John Doe\",\n    \"role\": \"PET_OWNER\",\n    \"isEmailVerified\": true\n  }\n}"
						}
					]
				},
				{
					"name": "Login Veterinarian",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User role is VETERINARIAN\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.equal('VETERINARIAN');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"vet@example.com\",\n  \"password\": \"VetPass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Login Shelter",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User role is SHELTER\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.role).to.equal('SHELTER');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"shelter@example.com\",\n  \"password\": \"ShelterPass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "‚ùå Error Cases",
			"item": [
				{
					"name": "Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login failed with invalid email\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"Invalid email or password\");",
									"});",
									"",
									"pm.test(\"No data returned on error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.null;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"AnyPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": [
						{
							"name": "Invalid Email Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"AnyPassword123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": ["{{base_url}}"],
									"path": ["api", "auth", "login"]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Invalid email or password!\",\n  \"data\": null\n}"
						}
					]
				},
				{
					"name": "Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login failed with wrong password\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"Invalid email or password\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"petowner@example.com\",\n  \"password\": \"WrongPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Unverified Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login failed - email not verified\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"verify your email first\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"unverified@example.com\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Validation Tests",
			"item": [
				{
					"name": "Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation error for missing email\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"Validation failed\");",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation error for missing password\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"Validation failed\");",
									"    pm.expect(jsonData.data).to.have.property('password');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation error for invalid email format\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"Validation failed\");",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid-email-format\",\n  \"password\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîí Protected Endpoints (Using Token)",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Check if we have a token",
									"const token = pm.environment.get(\"auth_token\");",
									"if (!token) {",
									"    console.log(\"No auth token found. Please run a login request first.\");",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data retrieved successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.not.be.null;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile"]
						}
					},
					"response": []
				},
				{
					"name": "Access Protected Endpoint Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Access denied without token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.message).to.include(\"Access denied\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "user", "profile"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"http://localhost:8080\");",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
